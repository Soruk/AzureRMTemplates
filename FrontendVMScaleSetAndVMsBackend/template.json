{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environmentName": {
      "defaultValue": "myPlatform",
      "type": "string",
      "metadata": {
        "description": "Type name of the environment. It is used to prefix resources."
      }
    },
    "environmentNumber": {
      "defaultValue": 0,
      "type": "int",
      "metadata": {
        "description": "Type environment number."
      }
    },
    "environmentType": {
      "type": "string",
      "allowedValues": ["Dev", "Prod", "Test"],
      "defaultValue": "Dev",
      "metadata": {
        "description": "Type of environment where this deployment should occur."
      }
    },
    "availibiltyZone": {
      "type": "int",
      "allowedValues": [0, 1, 2, 3],
      "defaultValue": 1,
      "metadata": {
        "description": "The availibility zone: '0' for none."
      }
    },
    "vmSizeWeb": {
      "defaultValue": "Standard_B2s",
      "allowedValues": ["Standard_B2s", "Standard_D2s_v3", "Standard_D4s_v3"],
      "type": "string",
      "metadata": {
        "description": "Type size of deployed Web VM."
      }
    },
    "vmSizeDb": {
      "defaultValue": "Standard_B2s",
      "allowedValues": ["Standard_B2s", "Standard_D2s_v3", "Standard_D4s_v3"],
      "type": "string",
      "metadata": {
        "description": "Type size of deployed Db VM."
      }
    },    
    "vmSizeApp": {
      "defaultValue": "Standard_B2s",
      "allowedValues": ["Standard_B2s", "Standard_D2s_v3", "Standard_D4s_v3"],
      "type": "string",
      "metadata": {
        "description": "Type size of deployed App VM."
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "defaultValue": "vmAdmin",
      "metadata": {
        "description": "Type VM admin user name."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "defaultValue": null,
      "metadata": {
        "description": "Type VM admin password."
      }
    },
    "instancesCount": {
      "defaultValue": 2,
      "type": "int",
      "metadata": {
        "description": "Number of instances in Web VM Scaleset"
      }
    },    
    "authorizedImportP2PIpAddresses": {
      "defaultValue": [["127.0.0.1", "1.1.1.1"]],
      "type": "array",
      "metadata": {
        "description": "The array of pulblic IP addresses authorized to use Import P2P functionality."
      }
    },
    "customWebDomains": {
      "defaultValue": ["name1.mydomain.com", "name2.mydomain.com"],
      "type": "array",
      "metadata": {
        "description": "The array of custom web domains."
      }
    },
    "resourcesStorageAccountName": {
      "defaultValue": "installResourceStorageAccountName",
      "type": "string",
      "metadata": {
        "description": "The storage account name where the base install scripts and setups are stored. These files sould be stored in containers by environment type."
      }
    },
    "resourcesStorageAccountKey": {
      "defaultValue": "installResourceStorageAccountKey",
      "type": "string",
      "metadata": {
        "description": "The storage account key where the base install scripts and setups are stored. These files sould be stored in containers by environment type."
      }
    }
  },
  "variables": {
    "environmentInfix": "[concat(parameters('environmentNumber'),'-', toLower(parameters('environmentType')))]",
    "environmentPrefix": "[concat(toLower(parameters('environmentName')),'-',variables('environmentInfix'))]",
    "srvDbName": "srvdb",
    "vmNameDb": "[concat(variables('srvDbName'), '-', toLower(variables('environmentInfix')), '-vm')]",
    "networkInterfaceNameVMDb": "[concat(variables('srvDbName'), '-', toLower(variables('environmentInfix')), '-nic')]",
    "srvappName": "srvap",
    "vmNameApp": "[concat(variables('srvappName'), '-', toLower(variables('environmentInfix')), '-vm')]",
    "networkInterfaceNameVMApp": "[concat(variables('srvappName'), '-', toLower(variables('environmentInfix')), '-nic')]",
    "srvWebName": "srvww",
    "vmScaleSetWebName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss')]",
    "lbScaleSetWebName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb')]",
    "lbipScaleSetWebSku": "Basic",
    "publicIpAllocationMethod": "[if(equals(toLower(variables('lbipScaleSetWebSku')),'standard'),'Static','Dynamic')]",
    "lbScaleSetWebBackendPoolName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-bp')]",
    "lbScaleSetWebNatPoolName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-np')]",
    "lbScaleSetWebRuleName1": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-r1')]",
    "lbScaleSetWebRuleName2": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-r2')]",
    "lbScaleSetWebRuleName3": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-r3')]",
    "lbScaleSetWebRuleName4": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-r4')]",
    "lbScaleSetWebFrontendName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-f')]",
    "lbScaleSetTlcFrontendName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-tlc-f')]",
    "lbScaleSetWebProbeName1": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-p1')]",
    "lbScaleSetWebProbeName2": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-p2')]",
    "lbScaleSetWebProbeName3": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-p3')]",
    "lbScaleSetWebProbeName4": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-p4')]",
    "vmScaleSetWebAutoScaleName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-asr')]",
    "lbScaleSetPortHttp": 80,
    "lbScaleSetPortHttps": 443,
    "lbScaleSetPortImport1P2P": 18443,
    "lbScaleSetPortImport2P2P": 7405,
    "rdpNatBackendPort": 3389,
    "sqlPortNumber": 1433,
    "frontendPortNatStartValue": 33400,
    "frontendPortNatEndValue": "[add(variables('frontendPortNatStartValue'), add(parameters('instancesCount'), 10))]",
    "storageAccountBackupName": "[concat(replace(variables('environmentPrefix'),'-',''), 'bkpv2')]",
    "storageAccountDiagnosticsName": "[concat(replace(variables('environmentPrefix'),'-',''), 'diagv2')]",
    "storageAccountGeneralName": "[concat(replace(variables('environmentPrefix'),'-',''), 'stdv2')]",
    "storageAccountCacheName": "[concat(replace(variables('environmentPrefix'),'-',''), 'cachev2')]",
    "virtualNetworkName": "[concat(variables('environmentPrefix'), '-vnet')]",
    "networkSecurityGroupNameFrontend": "[concat(variables('environmentPrefix'), '-frontend-nsg')]",
    "networkSecurityGroupNameBackend": "[concat(variables('environmentPrefix'), '-backend-nsg')]",
    "publicIPAddressWebName": "[concat(variables('environmentPrefix'), '-web-pip')]",
    "publicIPAddressTlcName": "[concat(variables('environmentPrefix'), '-tlc-pip')]",
    "azureFunctionName": "[concat(variables('environmentPrefix'), '-func')]",    
    "appInsightName": "[concat(variables('environmentPrefix'), '-ai')]",    
    "recoveryServiceVaultName": "[concat(variables('environmentPrefix'), '-rsv')]",
    "keyVaultName": "[concat(variables('environmentPrefix'), '-kv')]",
    "keyVaultEnabledForDeployment": "true",
    "keyVaultEnabledForDiskEncryption": "true",
    "keyVaultEnabledForTemplateDeployment": "true",
    "keyVaultSkuName": "Standard",
    "keyVaultKeyName1": "ConnectionString-StandardStorageAccount",
    "keyVaultKeyName2": "CurrentSubscriptionId",
    "keyVaultSecretsPermissionsAzureFunction": "get",
    "keyVaultSecretsPermissionsVmScaleSetWeb": "get",
    "ipCleanerCronExpression" : "0 0 5 * * 0",
    "backupDelay": 10,
    "backupUnit": "Days",
    "backupPolicyName": "[concat(variables('environmentPrefix'), '-', variables('backupDelay'), variables('backupUnit'), 'BackupPolicy')]",
    "backupPolicyTimes": ["2018-01-01T03:00:00.000Z"],
    "backupPolicyTimeZone": "UTC",
    "backupFabric": "Azure",
    "v2VmType": "Microsoft.Compute/virtualMachines",
    "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
    "v2Vm": "vm;iaasvmcontainerv2;",
    "vmsToProtect": ["[variables('vmNameDb')]", "[variables('vmNameApp')]"],
    "subnetFrontend": "frontend-subnet",
    "subnetBackend": "backend-subnet",
    "virtualNetworkAddressBaseInfixDev": "[if(equals(toLower(parameters('environmentType')),'dev'),0,0)]",
    "virtualNetworkAddressBaseInfixTest": "[if(equals(toLower(parameters('environmentType')),'test'),100,0)]",
    "virtualNetworkAddressBaseInfixProd": "[if(equals(toLower(parameters('environmentType')),'prod'),200,0)]",
    "virtualNetworkAddressBaseInfix": "[add(variables('virtualNetworkAddressBaseInfixDev'), add(variables('virtualNetworkAddressBaseInfixTest'),add(variables('virtualNetworkAddressBaseInfixProd'),parameters('environmentNumber'))))]",
    "virtualNetworkAddressPrefix": "[concat('10.',variables('virtualNetworkAddressBaseInfix'),'.0.0/24')]",
    "subnetFrontendAddressPrefix": "[concat('10.',variables('virtualNetworkAddressBaseInfix'),'.0.0/27')]",
    "subnetBackendAddressPrefix": "[concat('10.',variables('virtualNetworkAddressBaseInfix'),'.0.64/27')]",
    "sqlServerImagePublisher": "MicrosoftSQLServer",
    "sqlServerImageSku": "[if(equals(toLower(parameters('environmentType')),'prod'),'Standard','SQLDEV')]",
    "sqlServerImageOffer": "SQL2017-WS2016",    
    "sqlAutopatchingDayOfWeek": "Sunday",
    "sqlAutopatchingStartHour": 4,
    "sqlAutopatchingWindowDuration": 60,
    "sqlFullBackupStartTime": 19,
    "windowsServerImagePublisher": "MicrosoftWindowsServer",
    "windowsServerImageOffer": "WindowsServer",
    "windowsServerImageSku": "2019-Datacenter",
    "windowsServerImageSkuWeb": "2019-Datacenter",
    "Owner": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
    "Contributor": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
    "Reader": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
    "Network Contributor": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
    "Storage Queue Data Contributor": "[concat('/subscriptions/',subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
    "apiVersionKeyVaultVaults": "[providers('Microsoft.KeyVault', 'vaults').apiVersions[0]]",
    "apiVersionWebSites": "[providers('Microsoft.Web', 'sites').apiVersions[0]]",
    "apiVersionComputeVMSS": "[providers('Microsoft.Compute', 'virtualMachineScaleSets').apiVersions[0]]",
    "apiVersionComputeVM": "[providers('Microsoft.Compute', 'virtualMachines').apiVersions[0]]",
    "apiVersionStorageStorageAccounts": "[providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]]",
    "apiVersionNetworkNSG": "[providers('Microsoft.Network', 'networkSecurityGroups').apiVersions[0]]",
    "apiVersionNetworkVNet": "[providers('Microsoft.Network', 'virtualNetworks').apiVersions[0]]",
    "apiVersionNetworkLB": "[providers('Microsoft.Network', 'loadBalancers').apiVersions[0]]",
    "apiVersionNetworkNIC": "[providers('Microsoft.Network', 'networkInterfaces').apiVersions[0]]",
    "apiVersionNetworkPIP": "[providers('Microsoft.Network', 'publicIPAddresses').apiVersions[0]]",
    "apiVersionRecoveryServicesVaults": "[providers('Microsoft.RecoveryServices', 'vaults').apiVersions[0]]",
    "apiVersionInsightsAutoscaleSettings": "[providers('Microsoft.Insights', 'autoscaleSettings').apiVersions[0]]",
    "apiVersionInsightsComponents": "[providers('Microsoft.Insights', 'components').apiVersions[0]]"
  },
  "outputs": {},
  "resources": [{
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmNameApp')]",
      "apiVersion": "[variables('apiVersionComputeVM')]",
      "location": "[resourceGroup().location]",
      "zones": ["[parameters('availibiltyZone')]"],
      "scale": null,
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizeApp')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('windowsServerImagePublisher')]",
            "offer": "[variables('windowsServerImageOffer')]",
            "sku": "[variables('windowsServerImageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "osType": "Windows",
            "name": "[concat(variables('vmNameApp'),'-osDisk')]",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            },
            "diskSizeGB": 128
          },
          "dataDisks": [{
              "lun": 0,
              "name": "[concat(variables('vmNameApp'),'-dataDisk')]",
              "createOption": "Empty",
              "caching": "ReadOnly",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              },
              "diskSizeGB": 63
            },
            {
              "lun": 1,
              "name": "[concat(variables('vmNameApp'),'-imageDisk1')]",
              "createOption": "Empty",
              "caching": "ReadOnly",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              },
              "diskSizeGB": 127
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('vmNameApp')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true,
            "timeZone": "Romance Standard Time" 
          },
          "secrets": []
        },
        "networkProfile": {
          "networkInterfaces": [{
            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameVMApp'))]"
          }]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https', '://', variables('storageAccountDiagnosticsName'), '.blob.core.windows.net', '/')]"
          }
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameVMApp'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountDiagnosticsName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]"
      ]
    },
    {
      "apiVersion": "[variables('apiVersionComputeVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameApp'), '/', 'configureScript-', variables('vmNameApp'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "settings": {
          "fileUris": [
            "[concat('https', '://', parameters('resourcesStorageAccountName'), '.blob.core.windows.net', '/', toLower(parameters('environmentType')), '-scripts', '/configure.srvapp.ps1')]"
          ]
        },
        "typeHandlerVersion": "1.9",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File configure.srvapp.ps1 -environmentType ', toLower(parameters('environmentType')), ' -environmentNumber ', parameters('environmentNumber'), ' -srvDbName ', variables('vmNameDb'), ' -srvAppName ', variables('vmNameApp'), ' -storageAccountName ', parameters('resourcesStorageAccountName'), ' -storageAccountKey ', parameters('resourcesStorageAccountKey'), ' -vmAdminUsername ', parameters('vmAdminUsername'), ' -vmAdminPassword ', parameters('vmAdminPassword'))]",
          "storageAccountName": "[parameters('resourcesStorageAccountName')]",
          "storageAccountKey": "[parameters('resourcesStorageAccountKey')]"
        },
        "type": "CustomScriptExtension"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameApp'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameApp'), '/', 'antimalwareIaaSExtension-', variables('vmNameApp'))]",
      "apiVersion": "[variables('apiVersionComputeVM')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameApp'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "IaaSAntimalware",
        "typeHandlerVersion": "1.5",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "AntimalwareEnabled": true,
          "Exclusions": {
            "Paths": "C:\\Users",
            "Extensions": ".txt",
            "Processes": "taskmgr.exe"
          },
          "RealtimeProtectionEnabled": true,
          "ScheduledScanSettings": {
            "isEnabled": "true",
            "scanType": "Full",
            "day": "7",
            "time": "300"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersionComputeVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameApp'),'/', 'bgInfo-', variables('vmNameApp'))]",     
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameApp'))]"
      ],
      "properties": {
          "publisher": "Microsoft.Compute",
          "type": "BGInfo",
          "typeHandlerVersion": "2.1",
          "autoUpgradeMinorVersion": true,
          "settings": {
              "Properties": []
          }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmNameDb')]",
      "apiVersion": "[variables('apiVersionComputeVM')]",
      "location": "[resourceGroup().location]",
      "zones": ["[parameters('availibiltyZone')]"],
      "scale": null,
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizeDb')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('sqlServerImagePublisher')]",
            "offer": "[variables('sqlServerImageOffer')]",
            "sku": "[variables('sqlServerImageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "osType": "Windows",
            "name": "[concat(variables('vmNameDb'),'-osDisk')]",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            },
            "diskSizeGB": 128
          },
          "dataDisks": [{
            "lun": 0,
            "name": "[concat(variables('vmNameDb'),'-dataDisk')]",
            "createOption": "Empty",
            "caching": "ReadOnly",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            },
            "diskSizeGB": 127
          }]
        },
        "osProfile": {
          "computerName": "[variables('vmNameDb')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true,
            "timeZone": "Romance Standard Time" 
          },
          "secrets": []
        },
        "networkProfile": {
          "networkInterfaces": [{
            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameVMDb'))]"
          }]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https', '://', variables('storageAccountDiagnosticsName'), '.blob.core.windows.net', '/')]"
          }
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameVMDb'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountDiagnosticsName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
      ]
    },
    {
      "apiVersion": "[variables('apiVersionComputeVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameDb'), '/', 'configureScript-', variables('vmNameDb'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]",
        "[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb')), '/extensions/', 'sqlIaaSExtension-', variables('vmNameDb'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "settings": {
          "fileUris": [
            "[concat('https', '://', parameters('resourcesStorageAccountName'), '.blob.core.windows.net', '/', toLower(parameters('environmentType')), '-scripts', '/configure.srvdb.ps1')]"
          ]
        },
        "typeHandlerVersion": "1.9",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File configure.srvdb.ps1 -environmentType ', toLower(parameters('environmentType')), ' -environmentNumber ', parameters('environmentNumber'), ' -srvDbName ', variables('vmNameDb'), ' -srvAppName ', variables('vmNameApp'), ' -storageAccountName ', parameters('resourcesStorageAccountName'), ' -storageAccountKey ', parameters('resourcesStorageAccountKey'), ' -vmAdminUsername ', parameters('vmAdminUsername'), ' -vmAdminPassword ', parameters('vmAdminPassword'))]",
          "storageAccountName": "[parameters('resourcesStorageAccountName')]",
          "storageAccountKey": "[parameters('resourcesStorageAccountKey')]"
        },
        "type": "CustomScriptExtension"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameDb'), '/', 'antimalwareIaaSExtension-', variables('vmNameDb'))]",
      "apiVersion": "[variables('apiVersionComputeVM')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Azure.Security",
        "type": "IaaSAntimalware",
        "typeHandlerVersion": "1.5",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "AntimalwareEnabled": true,
          "Exclusions": {
            "Paths": "C:\\Users",
            "Extensions": ".txt",
            "Processes": "taskmgr.exe"
          },
          "RealtimeProtectionEnabled": true,
          "ScheduledScanSettings": {
            "isEnabled": "true",
            "scanType": "Full",
            "day": "7",
            "time": "300"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('apiVersionComputeVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameDb'),'/', 'bgInfo-', variables('vmNameDb'))]",     
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]"
      ],
      "properties": {
          "publisher": "Microsoft.Compute",
          "type": "BGInfo",
          "typeHandlerVersion": "2.1",
          "autoUpgradeMinorVersion": true,
          "settings": {
              "Properties": []
          }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      }
    },
    {
      "apiVersion": "[variables('apiVersionComputeVM')]",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameDb'), '/', 'sqlIaaSExtension-', variables('vmNameDb'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountBackupName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.SqlServer.Management",
        "settings": {
          "AutoTelemetrySettings": {
            "Region": "[resourceGroup().location]"
          },
          "AutoBackupSettings": {
            "Enable": true,
            "RetentionPeriod": "[variables('backupDelay')]",
            "BackupScheduleType": "manual",
            "BackupSystemDbs": false,
            "EnableEncryption": true,
            "FullBackupFrequency": "Daily",
            "FullBackupStartTime": "[variables('sqlFullBackupStartTime')]",
            "FullBackupWindowHours": "6",
            "LogBackupFrequency": "60"
          },
          "AutoPatchingSettings": {
            "PatchCategory": "WindowsMandatoryUpdates",
            "Enable": true,
            "DayOfWeek": "[variables('sqlAutopatchingDayOfWeek')]",
            "MaintenanceWindowStartingHour": "[variables('sqlAutopatchingStartHour')]",
            "MaintenanceWindowDuration": "[variables('sqlAutopatchingWindowDuration')]"
          },
          "ServerConfigurationsManagementSettings": {
            "SQLConnectivityUpdateSettings": {
              "ConnectivityType": "Private",
              "Port": "[variables('sqlPortNumber')]"
            },
            "SQLWorkloadTypeUpdateSettings": {
              "SQLWorkloadType": "GENERAL"
            },
            "AdditionalFeaturesServerConfigurations": {
              "IsRServicesEnabled": false
            }
          }
        },
        "typeHandlerVersion": "1.2",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "SQLAuthUpdateUserName": "[parameters('vmAdminUsername')]",
          "SQLAuthUpdatePassword": "[parameters('vmAdminPassword')]",
          "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBackupName')), variables('apiVersionStorageStorageAccounts')).primaryEndpoints['blob']]",
          "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBackupName')), variables('apiVersionStorageStorageAccounts')).keys[0].value]",
          "Password": "[parameters('vmAdminPassword')]"
        },
        "type": "SqlIaaSAgent"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      }
    },    
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "sku": {
        "name": "[parameters('vmSizeWeb')]",
        "tier": "Standard",
        "capacity": "[parameters('instancesCount')]"
      },
      "name": "[variables('vmScaleSetWebName')]",
      "apiVersion": "[variables('apiVersionComputeVMSS')]",
      "location": "[resourceGroup().location]",
      "zones": ["[parameters('availibiltyZone')]"],
      "scale": null,
      "properties": {
        "singlePlacementGroup": true,
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "osProfile": {
            "computerNamePrefix": "[variables('srvWebName')]",
            "adminUsername": "[parameters('vmAdminUsername')]",
            "adminPassword": "[parameters('vmAdminPassword')]",
            "windowsConfiguration": {
              "provisionVMAgent": true,
              "enableAutomaticUpdates": true,              
              "timeZone": "Romance Standard Time" 
            },
            "secrets": []
          },
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              },
              "diskSizeGB": 128
            },
            "imageReference": {
              "publisher": "[variables('windowsServerImagePublisher')]",
              "offer": "[variables('windowsServerImageOffer')]",
              "sku": "[variables('windowsServerImageSkuWeb')]",
              "version": "latest"
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [{
              "name": "[concat(variables('vmScaleSetWebName'),'-nic')]",
              "properties": {
                "primary": true,
                "enableAcceleratedNetworking": false,
                "dnsSettings": {
                  "dnsServers": []
                },
                "ipConfigurations": [{
                  "name": "[concat(variables('vmScaleSetWebName'),'-ipc')]",
                  "properties": {
                    "subnet": {
                      "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetFrontend'))]"
                    },
                    "privateIPAddressVersion": "IPv4",
                    "loadBalancerBackendAddressPools": [{
                      "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/backendAddressPools/', variables('lbScaleSetWebBackendPoolName'))]"
                    }],
                    "loadBalancerInboundNatPools": [{
                      "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/inboundNatPools/', variables('lbScaleSetWebNatPoolName'))]"
                    }]
                  }
                }],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
                }
              }
            }           
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[concat('https', '://', variables('storageAccountDiagnosticsName'), '.blob.core.windows.net', '/')]"
            }
          },
          "extensionProfile": {
            "extensions": [{
              "name": "configureScript",
              "properties": {
                "publisher": "Microsoft.Compute",
                "settings": {
                  "fileUris": [
                    "[concat('https', '://', parameters('resourcesStorageAccountName'), '.blob.core.windows.net', '/', toLower(parameters('environmentType')), '-scripts', '/configure.srvweb.ps1')]"
                  ]
                },
                "typeHandlerVersion": "1.9",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                  "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File configure.srvweb.ps1 -environmentType ', toLower(parameters('environmentType')), ' -environmentNumber ', parameters('environmentNumber'), ' -srvDbName ', variables('vmNameDb'), ' -srvAppName ', variables('vmNameApp'), ' -customWebDomains ', replace(replace(string(parameters('customWebDomains')), '[', ''), ']', ''), ' -storageAccountName ', parameters('resourcesStorageAccountName'), ' -storageAccountKey ', parameters('resourcesStorageAccountKey'), ' -vmAdminUsername ', parameters('vmAdminUsername'), ' -vmAdminPassword ', parameters('vmAdminPassword'))]",
                  "storageAccountName": "[parameters('resourcesStorageAccountName')]",
                  "storageAccountKey": "[parameters('resourcesStorageAccountKey')]"
                },
                "type": "CustomScriptExtension"
              }
            },
            {
              "name": "antimalwareIaaSExtension",
              "properties": {
                "publisher": "Microsoft.Azure.Security",
                "type": "IaaSAntimalware",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AntimalwareEnabled": true,
                  "Exclusions": {
                    "Paths": "C:\\Users",
                    "Extensions": ".txt",
                    "Processes": "taskmgr.exe"
                  },
                  "RealtimeProtectionEnabled": true,
                  "ScheduledScanSettings": {
                    "isEnabled": "true",
                    "scanType": "Full",
                    "day": "7",
                    "time": "300"
                  }
                }              
               }
            },
            {             
              "name": "bgInfo",                
              "properties": {
                  "publisher": "Microsoft.Compute",
                  "type": "BGInfo",
                  "typeHandlerVersion": "2.1",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                      "Properties": []
                  }
              }              
            }
            ]
          }
        },
        "overprovision": true
      },
      "identity": {
        "type": "SystemAssigned"       
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetFrontend'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
      ]
    },   
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('lbScaleSetWebName')]",
      "apiVersion": "[variables('apiVersionNetworkLB')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "sku": {
        "name": "[variables('lbipScaleSetWebSku')]"
      },    
      "properties": {
        "frontendIPConfigurations": [{
          "name": "[variables('lbScaleSetWebFrontendName')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressWebName'))]"
            }
          }        
        },
        {
          "name": "[variables('lbScaleSetTlcFrontendName')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressTlcName'))]"
            }
          }    
        }],
        "backendAddressPools": [{
          "name": "[variables('lbScaleSetWebBackendPoolName')]"
        }        
        ],
        "loadBalancingRules": [{
            "name": "[variables('lbScaleSetWebRuleName1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/frontendIPConfigurations/', variables('lbScaleSetWebFrontendName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/backendAddressPools/', variables('lbScaleSetWebBackendPoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": "[variables('lbScaleSetPortHttps')]",
              "backendPort": "[variables('lbScaleSetPortHttps')]",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIPProtocol",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')),'/probes/',variables('lbScaleSetWebProbeName1'))]"
              }
            }
          },         
          {
            "name": "[variables('lbScaleSetWebRuleName2')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/frontendIPConfigurations/', variables('lbScaleSetWebFrontendName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/backendAddressPools/', variables('lbScaleSetWebBackendPoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": "[variables('lbScaleSetPortHttp')]",
              "backendPort": "[variables('lbScaleSetPortHttp')]",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIPProtocol",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')),'/probes/',variables('lbScaleSetWebProbeName2'))]"
              }
            }
          },    
          {
            "name": "[variables('lbScaleSetWebRuleName3')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/frontendIPConfigurations/', variables('lbScaleSetTlcFrontendName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/backendAddressPools/', variables('lbScaleSetWebBackendPoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": "[variables('lbScaleSetPortHttps')]",
              "backendPort": "[variables('lbScaleSetPortImport1P2P')]",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIPProtocol",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')),'/probes/',variables('lbScaleSetWebProbeName3'))]"
              }
            }
          },
          {
            "name": "[variables('lbScaleSetWebRuleName4')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/frontendIPConfigurations/', variables('lbScaleSetWebFrontendName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/backendAddressPools/', variables('lbScaleSetWebBackendPoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": "[variables('lbScaleSetPortImport2P2P')]",
              "backendPort": "[variables('lbScaleSetPortImport2P2P')]",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIPProtocol",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')),'/probes/',variables('lbScaleSetWebProbeName4'))]"
              }
            }
          }  
        ],
        "probes": [{
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('lbScaleSetPortHttps')]",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[variables('lbScaleSetWebProbeName1')]"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('lbScaleSetPortHttp')]",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[variables('lbScaleSetWebProbeName2')]"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('lbScaleSetPortImport1P2P')]",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[variables('lbScaleSetWebProbeName3')]"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('lbScaleSetPortImport2P2P')]",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[variables('lbScaleSetWebProbeName4')]"
          }
        ],
        "outboundNatRules": [],
        "inboundNatPools": [{
          "name": "[variables('lbScaleSetWebNatPoolName')]",
          "properties": {
            "frontendIPConfiguration": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/frontendIPConfigurations/', variables('lbScaleSetWebFrontendName'))]"
            },
            "protocol": "Tcp",
            "frontendPortRangeStart": "[variables('frontendPortNatStartValue')]",
            "frontendPortRangeEnd": "[variables('frontendPortNatEndValue')]",
            "backendPort": "[variables('rdpNatBackendPort')]"
          }
        }]
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressWebName'))]",
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressTlcName'))]"
      ]
    },  
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('networkInterfaceNameVMApp')]",
      "apiVersion": "[variables('apiVersionNetworkNIC')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "ipConfigurations": [{
          "name": "[concat(variables('vmNameApp'),'-ipc')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "subnet": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBackend'))]"
            }
          }
        }],
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": false,
        "primary": true,
        "virtualMachine": {
          "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmNameApp'))]"
        },
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBackend'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('networkInterfaceNameVMDb')]",
      "apiVersion": "[variables('apiVersionNetworkNIC')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "ipConfigurations": [{
          "name": "[concat(variables('vmNameDb'),'-ipc')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "subnet": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBackend'))]"
            }
          }
        }],
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": false,
        "primary": true,
        "virtualMachine": {
          "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmNameDb'))]"
        },
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBackend'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupNameFrontend')]",
      "apiVersion": "[variables('apiVersionNetworkNSG')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "defaultSecurityRules": [{
            "name": "AllowVnetInBound",
            "properties": {
              "description": "Allow inbound traffic from all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAzureLoadBalancerInBound",
            "properties": {
              "description": "Allow inbound traffic from azure load balancer",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 65001,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "description": "Deny all inbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowVnetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowInternetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "access": "Allow",
              "priority": 65001,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllOutBound",
            "properties": {
              "description": "Deny all outbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ],
        "securityRules": [{
            "name": "AllowAccessHTTP",
            "properties": {
              "description": "Allow inbound HTTP traffic from Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "[variables('lbScaleSetPortHttp')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAccessHTTPS",
            "properties": {
              "description": "Allow inbound HTTPS traffic from Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "[variables('lbScaleSetPortHttps')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 210,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAccessImportP2P",
            "properties": {
              "description": "Allow inbound Import P2P traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRanges": [
                "[variables('lbScaleSetPortImport1P2P')]",
                "[variables('lbScaleSetPortImport2P2P')]"
              ],
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound",
              "sourceAddressPrefixes": "[first(parameters('authorizedImportP2PIpAddresses'))]",
              "destinationAddressPrefixes": []
            }
          }
        ]
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/',variables('azureFunctionName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "name":
        "[concat(variables('networkSecurityGroupNameFrontend'), '/','AllowAccessImportP2P', copyIndex())]",
      "apiVersion": "[variables('apiVersionNetworkNSG')]",
      "copy": {
        "name": "authorizedImportP2PIpAddressesItemsCopy",
        "count": "[length(parameters('authorizedImportP2PIpAddresses'))]"
      },
      "scale": null,
      "properties": {
        "protocol": "*",
        "sourcePortRange": "*",      
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "[add(1001, copyIndex())]",
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [
          "[variables('lbScaleSetPortImport1P2P')]",
          "[variables('lbScaleSetPortImport2P2P')]"
        ],
        "sourceAddressPrefixes":
          "[parameters('authorizedImportP2PIpAddresses')[copyIndex()]]",
        "destinationAddressPrefixes": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]",
        "[resourceId('Microsoft.Web/sites/',variables('azureFunctionName'))]"
      ]
    },  
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupNameBackend')]",
      "apiVersion": "[variables('apiVersionNetworkNSG')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "defaultSecurityRules": [{
            "name": "AllowVnetInBound",
            "properties": {
              "description": "Allow inbound traffic from all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAzureLoadBalancerInBound",
            "properties": {
              "description": "Allow inbound traffic from azure load balancer",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 65001,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "description": "Deny all inbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowVnetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowInternetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "access": "Allow",
              "priority": 65001,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllOutBound",
            "properties": {
              "description": "Deny all outbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ],
        "securityRules": []
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups/providers/roleAssignments",
      "apiVersion": "2019-04-01-preview",
      "name": "[concat(variables('networkSecurityGroupNameFrontend'), '/Microsoft.Authorization/', guid(resourceGroup().id, 'networkContributors'))]",
      "properties": {
        "roleDefinitionId": "[variables('Network Contributor')]",
        "principalId": "[reference(resourceId('Microsoft.Web/sites',variables('azureFunctionName')), variables('apiVersionWebSites'), 'Full').identity.principalId]",
        "scope":  "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]",
        "[resourceId('Microsoft.Web/sites/',variables('azureFunctionName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressWebName')]",
      "apiVersion": "[variables('apiVersionNetworkPIP')]",
      "location": "[resourceGroup().location]",
      "zones": ["[parameters('availibiltyZone')]"],
      "sku": {
        "name": "[variables('lbipScaleSetWebSku')]"
      },    
      "scale": null,
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "[variables('publicIpAllocationMethod')]",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[replace(variables('publicIPAddressWebName'),'-','')]",
          "fqdn": "[concat(replace(variables('publicIPAddressWebName'),'-',''), resourceGroup().location,'.cloudapp.azure.com')]"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressTlcName')]",
      "apiVersion": "[variables('apiVersionNetworkPIP')]",
      "location": "[resourceGroup().location]",
      "zones": ["[parameters('availibiltyZone')]"],
      "sku": {
        "name": "[variables('lbipScaleSetWebSku')]"
      },    
      "scale": null,
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "[variables('publicIpAllocationMethod')]",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[replace(variables('publicIPAddressTlcName'),'-','')]",
          "fqdn": "[concat(replace(variables('publicIPAddressTlcName'),'-',''), resourceGroup().location,'.cloudapp.azure.com')]"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },     
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "[variables('apiVersionNetworkVNet')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["[variables('virtualNetworkAddressPrefix')]"]
        },
        "subnets": [{
            "name": "[variables('subnetFrontend')]",
            "properties": {
              "addressPrefix": "[variables('subnetFrontendAddressPrefix')]"
            }
          },         
          {
            "name": "[variables('subnetBackend')]",
            "properties": {
              "addressPrefix": "[variables('subnetBackendAddressPrefix')]"
            }
          }         
        ],
        "virtualNetworkPeerings": []
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },    
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_ZRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('storageAccountBackupName')]",
      "apiVersion": "[variables('apiVersionStorageStorageAccounts')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('storageAccountDiagnosticsName')]",
      "apiVersion": "[variables('apiVersionStorageStorageAccounts')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('storageAccountGeneralName')]",
      "apiVersion": "[variables('apiVersionStorageStorageAccounts')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Storage/storageAccounts/providers/roleAssignments",
      "apiVersion": "2019-04-01-preview",
      "name": "[concat(variables('storageAccountGeneralName'), '/Microsoft.Authorization/', guid(resourceGroup().id, 'storageQueueDataContributors'))]",
      "properties": {
        "roleDefinitionId": "[variables('Storage Queue Data Contributor')]",
        "principalId": "[reference(resourceId('Microsoft.Compute/virtualMachineScaleSets/',variables('vmScaleSetWebName')),  variables('apiVersionComputeVMSS'), 'Full').identity.principalId]",
        "scope":  "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountGeneralName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountGeneralName'))]",
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/',variables('vmScaleSetWebName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "name": "[variables('storageAccountCacheName')]",
      "apiVersion": "[variables('apiVersionStorageStorageAccounts')]",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.RecoveryServices/vaults",
      "sku": {
        "name": "RS0",
        "tier": "Standard"
      },
      "name": "[variables('recoveryServiceVaultName')]",
      "apiVersion": "[variables('apiVersionRecoveryServicesVaults')]",
      "location": "[resourceGroup().location]",
      "properties": {},
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]",        
        "[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb')), '/extensions/', 'configureScript-', variables('vmNameDb'))]",
        "[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameApp')), '/extensions/', 'configureScript-', variables('vmNameApp'))]"
      ]
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
      "name": "[concat(variables('recoveryServiceVaultName'), '/', variables('backupPolicyName'))]",
      "apiVersion": "[variables('apiVersionRecoveryServicesVaults')]",
      "properties": {
        "backupManagementType": "AzureIaasVM",
        "schedulePolicy": {
          "scheduleRunFrequency": "Daily",
          "scheduleRunDays": null,
          "scheduleRunTimes": "[variables('backupPolicyTimes')]",
          "schedulePolicyType": "SimpleSchedulePolicy"
        },
        "retentionPolicy": {
          "dailySchedule": {
            "retentionTimes": "[variables('backupPolicyTimes')]",
            "retentionDuration": {
              "count": "[variables('backupDelay')]",
              "durationType": "[variables('backupUnit')]"
            }
          },
          "weeklySchedule": null,
          "monthlySchedule": null,
          "yearlySchedule": null,
          "retentionPolicyType": "LongTermRetentionPolicy"
        },
        "timeZone": "[variables('backupPolicyTimeZone')]"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('recoveryServiceVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
      "name": "[concat(variables('recoveryServiceVaultName'), '/', variables('backupFabric'), '/', variables('v2VmContainer'), concat(resourceGroup().name,';',variables('vmsToProtect')[copyIndex()]), '/', variables('v2Vm'), concat(resourceGroup().name,';',variables('vmsToProtect')[copyIndex()]))]",
      "apiVersion": "[variables('apiVersionRecoveryServicesVaults')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "protectedItemsCopy",
        "count": "[length(variables('vmsToProtect'))]"
      },
      "properties": {
        "protectedItemType": "[variables('v2VmType')]",
        "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies',variables('recoveryServiceVaultName'),variables('backupPolicyName'))]",
        "sourceResourceId": "[resourceId(subscription().subscriptionId,resourceGroup().name,'Microsoft.Compute/virtualMachines',variables('vmsToProtect')[copyIndex()])]"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('recoveryServiceVaultName'))]",
        "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies',variables('recoveryServiceVaultName'),variables('backupPolicyName'))]"     
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(variables('virtualNetworkName'), '/', variables('subnetFrontend'))]",
      "apiVersion": "[variables('apiVersionNetworkVNet')]",
      "scale": null,
      "properties": {
        "addressPrefix": "[variables('subnetFrontendAddressPrefix')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(variables('virtualNetworkName'), '/', variables('subnetBackend'))]",
      "apiVersion": "[variables('apiVersionNetworkVNet')]",
      "scale": null,
      "properties": {
        "addressPrefix": "[variables('subnetBackendAddressPrefix')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
      ]
    },    
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "[variables('apiVersionInsightsAutoscaleSettings')]",
      "name": "[variables('vmScaleSetWebAutoScaleName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('vmScaleSetWebAutoScaleName')]",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmScaleSetWebName'))]",
        "enabled": true,
        "profiles": [{
          "name": "[concat(variables('vmScaleSetWebAutoScaleName'), '-cpu-profile')]",
          "capacity": {
            "minimum": "1",
            "maximum": "10",
            "default": "1"
          },
          "rules": [{
              "metricTrigger": {
                "metricName": "Percentage CPU",
                "metricNamespace": "",
                "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmScaleSetWebName'))]",
                "timeGrain": "PT1M",
                "statistic": "Average",
                "timeWindow": "PT5M",
                "timeAggregation": "Average",
                "operator": "GreaterThan",
                "threshold": 50
              },
              "scaleAction": {
                "direction": "Increase",
                "type": "ChangeCount",
                "value": "1",
                "cooldown": "PT5M"
              }
            },
            {
              "metricTrigger": {
                "metricName": "Percentage CPU",
                "metricNamespace": "",
                "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmScaleSetWebName'))]",
                "timeGrain": "PT1M",
                "statistic": "Average",
                "timeWindow": "PT5M",
                "timeAggregation": "Average",
                "operator": "LessThan",
                "threshold": 30
              },
              "scaleAction": {
                "direction": "Decrease",
                "type": "ChangeCount",
                "value": "1",
                "cooldown": "PT5M"
              }
            }
          ]
        }]
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('vmScaleSetWebName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "[variables('apiVersionInsightsComponents')]",
      "name": "[variables('appInsightName')]",     
      "location": "[resourceGroup().location]",
      "properties": {
          "Application_Type":"web",
          "Flow_Type": "Redfield",
          "Request_Source": "AppServiceEnablementCreate"
      },
      "kind": "web",
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      }
    },       
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "[variables('apiVersionWebSites')]",
      "name": "[variables('azureFunctionName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "siteConfig": {
            "appSettings": [
                {
                    "name": "FUNCTIONS_WORKER_RUNTIME",
                    "value": "dotnet"
                },
                {
                    "name": "AzureWebJobsStorage",
                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountGeneralName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountGeneralName')), variables('apiVersionStorageStorageAccounts')).keys[0].value)]"
                },
                {
                    "name": "FUNCTIONS_EXTENSION_VERSION",
                    "value": "~2"
                },
                {
                    "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                    "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountGeneralName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountGeneralName')), variables('apiVersionStorageStorageAccounts')).keys[0].value)]"
                },              
                {
                    "name": "WEBSITE_NODE_DEFAULT_VERSION",
                    "value": "10.14.1"
                },
                {
                    "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                    "value": "[reference(concat('Microsoft.Insights/components/', variables('appInsightName')), '2015-05-01').InstrumentationKey]"
                },                
                {
                  "name": "AzureResourceGroup",
                  "value": "[resourceGroup().name]"
                },
                {
                  "name": "AzureFrontendNSG",
                  "value": "[variables('networkSecurityGroupNameFrontend')]"
                },
                {
                  "name": "P2PRulePortRanges",
                  "value": "[concat(variables('lbScaleSetPortImport1P2P'), ',', variables('lbScaleSetPortImport2P2P'))]"
                },
                {
                  "name": "AzureKeyVaultName",
                  "value": "[variables('keyVaultName')]"
                },
                {
                  "name": "IpRegistrationQueueName",
                  "value": "ipaddressregistrationqueue"
                },
                {
                  "name": "IpCleanerCronExpression",
                  "value": "[variables('ipCleanerCronExpression')]"
                }
            ]
        },
        "enabled": true,
        "hostNameSslStates": [
            {
                "name": "[concat(variables('azureFunctionName'),'.azurewebsites.net')]",
                "sslState": "Enabled",
                "hostType": "Enabled"
            },
            {
                "name": "[concat(variables('azureFunctionName'), '.scm.azurewebsites.net')]",
                "sslState": "Disabled",
                "hostType": "Repository"
            }
        ],
        "clientAffinityEnabled": false,
        "reserved": false,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true
      },            
      "kind": "functionapp",
      "identity": {
        "type": "SystemAssigned"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components/', variables('appInsightName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountGeneralName'))]"        
        ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "[variables('apiVersionKeyVaultVaults')]",
      "name": "[variables('keyVaultName')]",     
      "location": "[resourceGroup().location]",    
      "properties": {
        "enabledForDeployment": "[variables('keyVaultEnabledForDeployment')]",
        "enabledForDiskEncryption": "[variables('keyVaultEnabledForDiskEncryption')]",
        "enabledForTemplateDeployment": "[variables('keyVaultEnabledForTemplateDeployment')]",
        "tenantId": "[subscription().tenantId]",  
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",  
             "objectId": "[reference(resourceId('Microsoft.Web/sites',variables('azureFunctionName')), variables('apiVersionWebSites'), 'Full').identity.principalId]",
             "permissions": {
              "certificates": [],
              "keys": [],
              "secrets": [
                "[variables('keyVaultSecretsPermissionsAzureFunction')]"
              ]
            }
          },
          {
            "tenantId": "[subscription().tenantId]",  
            "objectId":  "[reference(resourceId('Microsoft.Compute/virtualMachineScaleSets/',variables('vmScaleSetWebName')), variables('apiVersionComputeVMSS'), 'Full').identity.principalId]",
            "permissions": {
              "certificates": [],
              "keys": [],
              "secrets": [
                "[variables('keyVaultSecretsPermissionsVmScaleSetWeb')]"
              ]      
            }
          }
        ],   
        "sku": {
          "name": "[variables('keyVaultSkuName')]",
          "family": "A"
        },
        "networkAcls": {
          "value": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
          }
        }
      }, 
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites/',variables('azureFunctionName'))]",
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/',variables('vmScaleSetWebName'))]"                 
      ]
    }, 
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultKeyName1'))]",
      "apiVersion": "[variables('apiVersionKeyVaultVaults')]",
      "location": "[resourceGroup().location]",        
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountGeneralName'))]"
      ],
      "properties": {
        "value": "[concat('DefaultEndpointsProtocol=https;AccountName=',variables('storageAccountGeneralName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountGeneralName')), variables('apiVersionStorageStorageAccounts')).keys[0].value)]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "name": "[concat(variables('keyVaultName'), '/', variables('keyVaultKeyName2'))]",
      "apiVersion": "[variables('apiVersionKeyVaultVaults')]",
      "location": "[resourceGroup().location]",        
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
      ],
      "properties": {
        "value": "[subscription().subscriptionId]"
      }
    }          
  ]
}