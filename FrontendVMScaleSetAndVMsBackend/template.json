{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "environmentName": {
      "defaultValue": "myPlatform",
      "type": "string",
      "metadata": {
        "description": "Type name of the environment. It is used to prefix resources."
      }
    },
    "environmentNumber": {
      "defaultValue": 0,
      "type": "int",
      "metadata": {
        "description": "Type environment number."
      }
    },
    "environmentType": {
      "type": "string",
      "allowedValues": ["Dev", "Prod", "Test"],
      "defaultValue": "Dev",
      "metadata": {
        "description": "Type of environment where this deployment should occur."
      }
    },
    "availibiltyZone": {
      "type": "int",
      "allowedValues": [0, 1, 2, 3],
      "defaultValue": 1,
      "metadata": {
        "description": "The availibility zone: '0' for none."
      }
    },
    "vmSizeWeb": {
      "defaultValue": "Standard_B2s",
      "allowedValues": ["Standard_B2s", "Standard_D2s_v3", "Standard_D4s_v3"],
      "type": "string",
      "metadata": {
        "description": "Type size of deployed Web VM."
      }
    },
    "vmSizeDb": {
      "defaultValue": "Standard_B2s",
      "allowedValues": ["Standard_B2s", "Standard_D2s_v3", "Standard_D4s_v3"],
      "type": "string",
      "metadata": {
        "description": "Type size of deployed Db VM."
      }
    },
    "vmDbBYOL": {
      "defaultValue": false,
      "type": "bool",
      "metadata": {
        "description": "Choose to use own license."
      }
    },
    "vmSizeApp": {
      "defaultValue": "Standard_B2s",
      "allowedValues": ["Standard_B2s", "Standard_D2s_v3", "Standard_D4s_v3"],
      "type": "string",
      "metadata": {
        "description": "Type size of deployed App VM."
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "defaultValue": "vmAdmin",
      "metadata": {
        "description": "Type VM admin user name."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "defaultValue": null,
      "metadata": {
        "description": "Type VM admin password."
      }
    },
    "instancesCount": {
      "defaultValue": 2,
      "type": "int",
      "metadata": {
        "description": "Number of instances in Web VM Scaleset"
      }
    },
    "deployVirtualNetworkGateway": {
      "defaultValue": true,
      "type": "bool",
      "metadata": {
        "description": "Indicates whether to deploy Virtual Network Gateway."
      }
    },
    "localGatewayIpAddress": {
      "defaultValue": "127.0.0.1",
      "type": "string",
      "metadata": {
        "description": "The public IP of your network on premise to create VPN Site to Site."
      }
    },
    "authorizedImportP2PIpAddresses": {
      "defaultValue": [["127.0.0.1", "1.1.1.1"]],
      "type": "array",
      "metadata": {
        "description": "The array of pulblic IP addresses authorized to use Import P2P functionality."
      }
    },
    "customWebDomains": {
      "defaultValue": ["name1.mydomain.com", "name2.mydomain.com"],
      "type": "array",
      "metadata": {
        "description": "The array of custom web domains."
      }
    },
    "resourcesStorageAccountName": {
      "defaultValue": "installResourceStorageAccountName",
      "type": "string",
      "metadata": {
        "description": "The storage account name where the base install scripts and setups are stored. These files sould be stored in containers by environment type."
      }
    },
    "resourcesStorageAccountKey": {
      "defaultValue": "installResourceStorageAccountKey",
      "type": "string",
      "metadata": {
        "description": "The storage account key where the base install scripts and setups are stored. These files sould be stored in containers by environment type."
      }
    }
  },
  "variables": {
    "environmentInfix": "[concat(parameters('environmentNumber'),'-', toLower(parameters('environmentType')))]",
    "environmentPrefix": "[concat(toLower(parameters('environmentName')),'-',variables('environmentInfix'))]",
    "srvDbName": "srvdb",
    "vmNameDb": "[concat(variables('srvDbName'), '-', toLower(variables('environmentInfix')), '-vm')]",
    "networkInterfaceNameVMDb": "[concat(variables('srvDbName'), '-', toLower(variables('environmentInfix')), '-nic')]",
    "srvappName": "srvap",
    "vmNameApp": "[concat(variables('srvappName'), '-', toLower(variables('environmentInfix')), '-vm')]",
    "networkInterfaceNameVMApp": "[concat(variables('srvappName'), '-', toLower(variables('environmentInfix')), '-nic')]",
    "srvWebName": "srvww",
    "vmScaleSetWebName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss')]",
    "lbScaleSetWebName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb')]",
    "lbScaleSetWebBackendPoolName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-bp')]",
    "lbScaleSetWebNatPoolName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-np')]",
    "lbScaleSetWebRuleName1": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-r1')]",
    "lbScaleSetWebRuleName2": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-r2')]",
    "lbScaleSetWebRuleName3": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-r3')]",
    "lbScaleSetWebFrontendName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-f')]",
    "lbScaleSetWebProbeName1": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-p1')]",
    "lbScaleSetWebProbeName2": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-p2')]",
    "lbScaleSetWebProbeName3": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-lb-p3')]",
    "vmScaleSetWebAutoScaleName": "[concat(variables('srvWebName'), '-', toLower(variables('environmentInfix')), '-ss-asr')]",
    "lbScaleSetWebProbePortHttp": 80,
    "lbScaleSetWebProbePortHttps": 443,
    "lbScaleSetWebProbePortImportP2P": 7405,
    "rdpNatBackendPort": 3389,
    "sqlPortNumber": 1433,
    "frontendPortNatStartValue": 33400,
    "frontendPortNatEndValue": "[add(variables('frontendPortNatStartValue'), add(parameters('instancesCount'), 10))]",
    "storageAccountBackupName": "[concat(replace(variables('environmentPrefix'),'-',''), 'bkpv2')]",
    "storageAccountDiagnosticsName": "[concat(replace(variables('environmentPrefix'),'-',''), 'diagv2')]",
    "storageAccountGeneralName": "[concat(replace(variables('environmentPrefix'),'-',''), 'stdv2')]",
    "virtualNetworkName": "[concat(variables('environmentPrefix'), '-vnet')]",
    "virtualNetworkGatewayName": "[concat(variables('environmentPrefix'), '-vng')]",
    "localNetworkGatewayName": "[concat(variables('environmentPrefix'), '-lng')]",
    "connectionNameVNet2site": "[concat(variables('environmentPrefix'), '-vnet2site')]",
    "networkSecurityGroupNameFrontend": "[concat(variables('environmentPrefix'), '-frontend-nsg')]",
    "networkSecurityGroupNameBackend": "[concat(variables('environmentPrefix'), '-backend-nsg')]",
    "publicIPAddressesVPNName": "[concat(variables('environmentPrefix'), '-vpn-pip')]",
    "publicIPAddressesWebName": "[concat(variables('environmentPrefix'), '-web-pip')]",
    "recoveryServiceVaultName": "[concat(variables('environmentPrefix'), '-rsv')]",
    "backupDelay": 10,
    "backupUnit": "Days",
    "backupPolicyName": "[concat(variables('environmentPrefix'), '-', variables('backupDelay'), variables('backupUnit'), 'BackupPolicy')]",
    "backupPolicyTimes": ["2018-01-01T03:00:00.000Z"],
    "backupPolicyTimeZone": "UTC",
    "backupFabric": "Azure",
    "v2VmType": "Microsoft.Compute/virtualMachines",
    "v2VmContainer": "iaasvmcontainer;iaasvmcontainerv2;",
    "v2Vm": "vm;iaasvmcontainerv2;",
    "vmsToProtect": ["[variables('vmNameDb')]", "[variables('vmNameApp')]"],
    "subnetGateway": "GatewaySubnet",
    "subnetFrontend": "frontend-subnet",
    "subnetBackend": "backend-subnet",
    "vpnGatewayType": "RouteBased",
    "vpnGatewaySku": "VpnGw1",
    "vpnGatewayClientProtocols": ["SSTP", "IkeV2"],
    "virtualNetworkAddressBaseInfixDev": "[if(equals(toLower(parameters('environmentType')),'dev'),0,0)]",
    "virtualNetworkAddressBaseInfixTest": "[if(equals(toLower(parameters('environmentType')),'test'),100,0)]",
    "virtualNetworkAddressBaseInfixProd": "[if(equals(toLower(parameters('environmentType')),'prod'),200,0)]",
    "virtualNetworkAddressBaseInfix": "[add(variables('virtualNetworkAddressBaseInfixDev'), add(variables('virtualNetworkAddressBaseInfixTest'),add(variables('virtualNetworkAddressBaseInfixProd'),parameters('environmentNumber'))))]",
    "virtualNetworkAddressPrefix": "[concat('10.',variables('virtualNetworkAddressBaseInfix'),'.0.0/16')]",
    "subnetGatewayAddressPrefix": "[concat('10.',variables('virtualNetworkAddressBaseInfix'),'.128.0/24')]",
    "subnetFrontendAddressPrefix": "[concat('10.',variables('virtualNetworkAddressBaseInfix'),'.8.0/24')]",
    "subnetBackendAddressPrefix": "[concat('10.',variables('virtualNetworkAddressBaseInfix'),'.32.0/24')]",
    "vpnGatewayAddressPrefix": "[concat('172.',variables('virtualNetworkAddressBaseInfix'),'.128.0/24')]",
    "localGatewayAddressPrefix": "[concat('172.',variables('virtualNetworkAddressBaseInfix'),'.192.0/24')]",
    "psRootCertificateName": "P2SRootCertExample",
    "psRootCertifcatePublicData": "MIIC9TCCAd2gAwIBAgIQKfKt+fwgI5tE1B6jlBY/9TANBgkqhkiG9w0BAQsFADAdMRswGQYDVQQDDBJQMlNSb290Q2VydEV4YW1wbGUwHhcNMTgwMjEzMDcxMzU4WhcNMjgwMjEzMDcyMzU4WjAdMRswGQYDVQQDDBJQMlNSb290Q2VydEV4YW1wbGUwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDAxd7tBvz3ZcI6IJthPDv5lylvrvKHbkrfWtnjqIcHES9VQFnVGLw9OVAmzKgTcC8e8fcolOiNANXZUSjHxOVb5ndlIf3QN9m8UEtcEJf02bXqIExCz3t4pHRJwAWvCyWlDLT4UmlcUzJiUShVAYr2xSEI13Cjl6rIxxWCmTp+dR0BzhcBywYw8nnEWmR2ze2a6AK2pBG6sX+CJfD0pSfHjg/0Z7WwKaYEjija6c8kFYmmuPShUpirll8KxGrrJs+v/rYQXB6VOutVylmsVmp0ex18LPUrPFEtjN0Lmo/DBpvYAmCS2sUzExKgnMSkeId8hVBvG0r9NBTiabqDkC4pAgMBAAGjMTAvMA4GA1UdDwEB/wQEAwICBDAdBgNVHQ4EFgQU1Nby+seD/CQ30uDBeiTu/d8yXlYwDQYJKoZIhvcNAQELBQADggEBACI7F6dsOxEYdMJJu9x5+8caV412n0OiqGV1+zBQsTav7m2XsI0EWZI3kajZKQOSrEBD1qW+78HOi04TJZxt7ErqyPCFjkto1smLVU6B6PcZwowZBszw092cRUgZQg2ERAh60ZJ3R0QNuT0iIEBxV9SU8S3zYg0QYKEV+T6tl5nsfhFLrnf2ck/VN5faokZHgNSrR+8DjKy94rkHKw4+4B1aXKq5d8OrwUvaBP2M0OO/Ts3abEcPKw0lF2jbMa33yeAbA76RgaCKrZnoqqEOztOFdZt35LOBHlKK9uS9ZxeMCnWNSStvyMVplM+CnApXVKq3dt7UKbQGRMl3tB9VAFI=",
    "sqlServerImageSku": "[if(equals(toLower(parameters('environmentType')),'prod'),'Standard','SQLDEV')]",
    "sqlServerImageOffer": "SQL2016SP2-WS2016",
    "sqlAutopatchingDayOfWeek": "Sunday",
    "sqlAutopatchingStartHour": 4,
    "sqlAutopatchingWindowDuration": 60
  },
  "outputs": {},
  "resources": [{
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmNameApp')]",
      "apiVersion": "2017-03-30",
      "location": "[resourceGroup().location]",
      "zones": ["[parameters('availibiltyZone')]"],
      "scale": null,
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizeApp')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2016-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "osType": "Windows",
            "name": "[concat(variables('vmNameApp'),'-osDisk')]",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            },
            "diskSizeGB": 128
          },
          "dataDisks": [{
              "lun": 0,
              "name": "[concat(variables('vmNameApp'),'-dataDisk')]",
              "createOption": "Empty",
              "caching": "ReadOnly",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              },
              "diskSizeGB": 63
            },
            {
              "lun": 1,
              "name": "[concat(variables('vmNameApp'),'-imageDisk1')]",
              "createOption": "Empty",
              "caching": "ReadOnly",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              },
              "diskSizeGB": 127
            }
          ]
        },
        "osProfile": {
          "computerName": "[variables('vmNameApp')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true,
            "timeZone": "Romance Standard Time" 
          },
          "secrets": []
        },
        "networkProfile": {
          "networkInterfaces": [{
            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameVMApp'))]"
          }]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https', '://', variables('storageAccountDiagnosticsName'), '.blob.core.windows.net', '/')]"
          }
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameVMApp'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountDiagnosticsName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]"
      ]
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameApp'), '/', 'configureScript-', variables('vmNameApp'))]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publisher": "Microsoft.Compute",
        "settings": {
          "fileUris": [
            "[concat('https', '://', parameters('resourcesStorageAccountName'), '.blob.core.windows.net', '/', toLower(parameters('environmentType')), '-scripts', '/configure.srvapp.ps1')]"
          ]
        },
        "typeHandlerVersion": "1.9",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File configure.srvapp.ps1 -environmentType ', toLower(parameters('environmentType')), ' -environmentNumber ', parameters('environmentNumber'), ' -srvDbName ', variables('vmNameDb'), ' -srvAppName ', variables('vmNameApp'), ' -storageAccountName ', parameters('resourcesStorageAccountName'), ' -storageAccountKey ', parameters('resourcesStorageAccountKey'), ' -vmAdminUsername ', parameters('vmAdminUsername'), ' -vmAdminPassword ', parameters('vmAdminPassword'))]",
          "storageAccountName": "[parameters('resourcesStorageAccountName')]",
          "storageAccountKey": "[parameters('resourcesStorageAccountKey')]"
        },
        "type": "CustomScriptExtension"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameApp'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmNameDb')]",
      "apiVersion": "2017-03-30",
      "location": "[resourceGroup().location]",
      "zones": ["[parameters('availibiltyZone')]"],
      "scale": null,
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizeDb')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftSQLServer",
            "offer": "[variables('sqlServerImageOffer')]",
            "sku": "[variables('sqlServerImageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "osType": "Windows",
            "name": "[concat(variables('vmNameDb'),'-osDisk')]",
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            },
            "diskSizeGB": 128
          },
          "dataDisks": [{
            "lun": 0,
            "name": "[concat(variables('vmNameDb'),'-dataDisk')]",
            "createOption": "Empty",
            "caching": "ReadOnly",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            },
            "diskSizeGB": 127
          }]
        },
        "osProfile": {
          "computerName": "[variables('vmNameDb')]",
          "adminUsername": "[parameters('vmAdminUsername')]",
          "adminPassword": "[parameters('vmAdminPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": true,
            "timeZone": "Romance Standard Time" 
          },
          "secrets": []
        },
        "networkProfile": {
          "networkInterfaces": [{
            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameVMDb'))]"
          }]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https', '://', variables('storageAccountDiagnosticsName'), '.blob.core.windows.net', '/')]"
          }
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceNameVMDb'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountDiagnosticsName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
      ]
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameDb'), '/', 'configureScript-', variables('vmNameDb'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]",
        "[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb')), '/extensions/', 'sqlIaasExtension-', variables('vmNameDb'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "settings": {
          "fileUris": [
            "[concat('https', '://', parameters('resourcesStorageAccountName'), '.blob.core.windows.net', '/', toLower(parameters('environmentType')), '-scripts', '/configure.srvdb.ps1')]"
          ]
        },
        "typeHandlerVersion": "1.9",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File configure.srvdb.ps1 -environmentType ', toLower(parameters('environmentType')), ' -environmentNumber ', parameters('environmentNumber'), ' -srvDbName ', variables('vmNameDb'), ' -srvAppName ', variables('vmNameApp'), ' -storageAccountName ', parameters('resourcesStorageAccountName'), ' -storageAccountKey ', parameters('resourcesStorageAccountKey'), ' -vmAdminUsername ', parameters('vmAdminUsername'), ' -vmAdminPassword ', parameters('vmAdminPassword'))]",
          "storageAccountName": "[parameters('resourcesStorageAccountName')]",
          "storageAccountKey": "[parameters('resourcesStorageAccountKey')]"
        },
        "type": "CustomScriptExtension"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('vmNameDb'), '/', 'sqlIaasExtension-', variables('vmNameDb'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]",
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountBackupName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.SqlServer.Management",
        "settings": {
          "AutoTelemetrySettings": {
            "Region": "[resourceGroup().location]"
          },
          "AutoBackupSettings": {
            "Enable": true,
            "RetentionPeriod": "[variables('backupDelay')]",
            "BackupScheduleType": "automated",
            "BackupSystemDbs": false,
            "EnableEncryption": true
          },
          "AutoPatchingSettings": {
            "PatchCategory": "WindowsMandatoryUpdates",
            "Enable": true,
            "DayOfWeek": "[variables('sqlAutopatchingDayOfWeek')]",
            "MaintenanceWindowStartingHour": "[variables('sqlAutopatchingStartHour')]",
            "MaintenanceWindowDuration": "[variables('sqlAutopatchingWindowDuration')]"
          },
          "ServerConfigurationsManagementSettings": {
            "SQLConnectivityUpdateSettings": {
              "ConnectivityType": "Private",
              "Port": "[variables('sqlPortNumber')]"
            },
            "SQLWorkloadTypeUpdateSettings": {
              "SQLWorkloadType": "GENERAL"
            },
            "AdditionalFeaturesServerConfigurations": {
              "IsRServicesEnabled": false
            }
          }
        },
        "typeHandlerVersion": "1.2",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "SQLAuthUpdateUserName": "[parameters('vmAdminUsername')]",
          "SQLAuthUpdatePassword": "[parameters('vmAdminPassword')]",
          "StorageUrl": "[reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBackupName')), '2015-06-15').primaryEndpoints['blob']]",
          "StorageAccessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountBackupName')), '2015-06-15').key1]",
          "Password": "[parameters('vmAdminPassword')]"
        },
        "type": "SqlIaaSAgent"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "sku": {
        "name": "[parameters('vmSizeWeb')]",
        "tier": "Standard",
        "capacity": "[parameters('instancesCount')]"
      },
      "name": "[variables('vmScaleSetWebName')]",
      "apiVersion": "2017-03-30",
      "location": "[resourceGroup().location]",
      "zones": ["[parameters('availibiltyZone')]"],
      "scale": null,
      "properties": {
        "singlePlacementGroup": true,
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "osProfile": {
            "computerNamePrefix": "[variables('srvWebName')]",
            "adminUsername": "[parameters('vmAdminUsername')]",
            "adminPassword": "[parameters('vmAdminPassword')]",
            "windowsConfiguration": {
              "provisionVMAgent": true,
              "enableAutomaticUpdates": true,              
              "timeZone": "Romance Standard Time" 
            },
            "secrets": []
          },
          "storageProfile": {
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadWrite",
              "managedDisk": {
                "storageAccountType": "Standard_LRS"
              },
              "diskSizeGB": 128
            },
            "imageReference": {
              "publisher": "MicrosoftWindowsServer",
              "offer": "WindowsServer",
              "sku": "2016-Datacenter",
              "version": "latest"
            }
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [{
              "name": "[concat(variables('vmScaleSetWebName'),'-nic')]",
              "properties": {
                "primary": true,
                "enableAcceleratedNetworking": false,
                "dnsSettings": {
                  "dnsServers": []
                },
                "ipConfigurations": [{
                  "name": "[concat(variables('vmScaleSetWebName'),'-ipc')]",
                  "properties": {
                    "subnet": {
                      "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetFrontend'))]"
                    },
                    "privateIPAddressVersion": "IPv4",
                    "loadBalancerBackendAddressPools": [{
                      "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/backendAddressPools/', variables('lbScaleSetWebBackendPoolName'))]"
                    }],
                    "loadBalancerInboundNatPools": [{
                      "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/inboundNatPools/', variables('lbScaleSetWebNatPoolName'))]"
                    }]
                  }
                }],
                "networkSecurityGroup": {
                  "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
                }
              }
            }]
          },
          "extensionProfile": {
            "extensions": [{
              "name": "configureScript",
              "properties": {
                "publisher": "Microsoft.Compute",
                "settings": {
                  "fileUris": [
                    "[concat('https', '://', parameters('resourcesStorageAccountName'), '.blob.core.windows.net', '/', toLower(parameters('environmentType')), '-scripts', '/configure.srvweb.ps1')]"
                  ]
                },
                "typeHandlerVersion": "1.9",
                "autoUpgradeMinorVersion": true,
                "protectedSettings": {
                  "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File configure.srvweb.ps1 -environmentType ', toLower(parameters('environmentType')), ' -environmentNumber ', parameters('environmentNumber'), ' -srvDbName ', variables('vmNameDb'), ' -srvAppName ', variables('vmNameApp'), ' -customWebDomains ', replace(replace(string(parameters('customWebDomains')), '[', ''), ']', ''), ' -storageAccountName ', parameters('resourcesStorageAccountName'), ' -storageAccountKey ', parameters('resourcesStorageAccountKey'), ' -vmAdminUsername ', parameters('vmAdminUsername'), ' -vmAdminPassword ', parameters('vmAdminPassword'))]",
                  "storageAccountName": "[parameters('resourcesStorageAccountName')]",
                  "storageAccountKey": "[parameters('resourcesStorageAccountKey')]"
                },
                "type": "CustomScriptExtension"
              }
            }]
          }
        },
        "overprovision": true
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetFrontend'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName'))]",
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
      ]
    },
    {
      "type": "Microsoft.Network/connections",
      "name": "[variables('connectionNameVNet2site')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "condition": "[bool(parameters('deployVirtualNetworkGateway'))]",
      "scale": null,
      "properties": {
        "virtualNetworkGateway1": {
          "id": "[resourceId('Microsoft.Network/virtualNetworkGateways', variables('virtualNetworkGatewayName'))]",
          "location": "[resourceGroup().location]"
        },
        "localNetworkGateway2": {
          "id": "[resourceId('Microsoft.Network/localNetworkGateways', variables('localNetworkGatewayName'))]",
          "location": "[resourceGroup().location]"
        },
        "connectionType": "IPsec",
        "routingWeight": 0,
        "enableBgp": false,
        "usePolicyBasedTrafficSelectors": false,
        "ipsecPolicies": []
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworkGateways', variables('virtualNetworkGatewayName'))]",
        "[resourceId('Microsoft.Network/localNetworkGateways', variables('localNetworkGatewayName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('lbScaleSetWebName')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "frontendIPConfigurations": [{
          "name": "[variables('lbScaleSetWebFrontendName')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressesWebName'))]"
            }
          }
        }],
        "backendAddressPools": [{
          "name": "[variables('lbScaleSetWebBackendPoolName')]"
        }],
        "loadBalancingRules": [{
            "name": "[variables('lbScaleSetWebRuleName1')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/frontendIPConfigurations/', variables('lbScaleSetWebFrontendName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/backendAddressPools/', variables('lbScaleSetWebBackendPoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": "[variables('lbScaleSetWebProbePortHttps')]",
              "backendPort": "[variables('lbScaleSetWebProbePortHttps')]",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIPProtocol",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')),'/probes/',variables('lbScaleSetWebProbeName1'))]"
              }
            }
          },
          {
            "name": "[variables('lbScaleSetWebRuleName2')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/frontendIPConfigurations/', variables('lbScaleSetWebFrontendName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/backendAddressPools/', variables('lbScaleSetWebBackendPoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": "[variables('lbScaleSetWebProbePortImportP2P')]",
              "backendPort": "[variables('lbScaleSetWebProbePortImportP2P')]",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIPProtocol",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')),'/probes/',variables('lbScaleSetWebProbeName2'))]"
              }
            }
          },
          {
            "name": "[variables('lbScaleSetWebRuleName3')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/frontendIPConfigurations/', variables('lbScaleSetWebFrontendName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/backendAddressPools/', variables('lbScaleSetWebBackendPoolName'))]"
              },
              "protocol": "Tcp",
              "frontendPort": "[variables('lbScaleSetWebProbePortHttp')]",
              "backendPort": "[variables('lbScaleSetWebProbePortHttp')]",
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "SourceIPProtocol",
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')),'/probes/',variables('lbScaleSetWebProbeName3'))]"
              }
            }
          }
        ],
        "probes": [{
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('lbScaleSetWebProbePortHttps')]",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[variables('lbScaleSetWebProbeName1')]"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('lbScaleSetWebProbePortImportP2P')]",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[variables('lbScaleSetWebProbeName2')]"
          },
          {
            "properties": {
              "protocol": "Tcp",
              "port": "[variables('lbScaleSetWebProbePortHttp')]",
              "intervalInSeconds": 15,
              "numberOfProbes": 2
            },
            "name": "[variables('lbScaleSetWebProbeName3')]"
          }
        ],
        "outboundNatRules": [],
        "inboundNatPools": [{
          "name": "[variables('lbScaleSetWebNatPoolName')]",
          "properties": {
            "frontendIPConfiguration": {
              "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('lbScaleSetWebName')), '/frontendIPConfigurations/', variables('lbScaleSetWebFrontendName'))]"
            },
            "protocol": "Tcp",
            "frontendPortRangeStart": "[variables('frontendPortNatStartValue')]",
            "frontendPortRangeEnd": "[variables('frontendPortNatEndValue')]",
            "backendPort": "[variables('rdpNatBackendPort')]"
          }
        }]
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressesWebName'))]"
      ]
    },
    {
      "type": "Microsoft.Network/localNetworkGateways",
      "name": "[variables('localNetworkGatewayName')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "condition": "[bool(parameters('deployVirtualNetworkGateway'))]",
      "scale": null,
      "properties": {
        "localNetworkAddressSpace": {
          "addressPrefixes": ["[variables('localGatewayAddressPrefix')]"]
        },
        "gatewayIpAddress": "[parameters('localGatewayIpAddress')]"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('networkInterfaceNameVMApp')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "ipConfigurations": [{
          "name": "[concat(variables('vmNameApp'),'-ipc')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "subnet": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBackend'))]"
            }
          }
        }],
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": false,
        "primary": true,
        "virtualMachine": {
          "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmNameApp'))]"
        },
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBackend'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('networkInterfaceNameVMDb')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "ipConfigurations": [{
          "name": "[concat(variables('vmNameDb'),'-ipc')]",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "subnet": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBackend'))]"
            }
          }
        }],
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": false,
        "primary": true,
        "virtualMachine": {
          "id": "[resourceId('Microsoft.Compute/virtualMachines', variables('vmNameDb'))]"
        },
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetBackend'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupNameFrontend')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "defaultSecurityRules": [{
            "name": "AllowVnetInBound",
            "properties": {
              "description": "Allow inbound traffic from all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAzureLoadBalancerInBound",
            "properties": {
              "description": "Allow inbound traffic from azure load balancer",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 65001,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "description": "Deny all inbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowVnetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowInternetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "access": "Allow",
              "priority": 65001,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllOutBound",
            "properties": {
              "description": "Deny all outbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ],
        "securityRules": [{
            "name": "AllowAccessHTTP",
            "properties": {
              "description": "Allow inbound HTTP traffic from Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "[variables('lbScaleSetWebProbePortHttp')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAccessHTTPS",
            "properties": {
              "description": "Allow inbound HTTPS traffic from Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "[variables('lbScaleSetWebProbePortHttps')]",
              "sourceAddressPrefix": "Internet",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 210,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAccessImportP2P",
            "properties": {
              "description": "Allow inbound Import P2P traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "[variables('lbScaleSetWebProbePortImportP2P')]",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound",
              "sourceAddressPrefixes": "[first(parameters('authorizedImportP2PIpAddresses'))]",
              "destinationAddressPrefixes": []
            }
          }
        ]
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
      "name":
        "[concat(variables('networkSecurityGroupNameFrontend'), '/','AllowAccessImportP2P', copyIndex())]",
      "apiVersion": "2017-10-01",
      "copy": {
        "name": "authorizedImportP2PIpAddressesItemsCopy",
        "count": "[length(parameters('authorizedImportP2PIpAddresses'))]"
      },
      "scale": null,
      "properties": {
        "protocol": "*",
        "sourcePortRange": "*",
        "destinationPortRange":
          "[variables('lbScaleSetWebProbePortImportP2P')]",
        "destinationAddressPrefix": "VirtualNetwork",
        "access": "Allow",
        "priority": "[add(1001, copyIndex())]",
        "direction": "Inbound",
        "sourcePortRanges": [],
        "destinationPortRanges": [],
        "sourceAddressPrefixes":
          "[parameters('authorizedImportP2PIpAddresses')[copyIndex()]]",
        "destinationAddressPrefixes": []
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupNameBackend')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "defaultSecurityRules": [{
            "name": "AllowVnetInBound",
            "properties": {
              "description": "Allow inbound traffic from all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowAzureLoadBalancerInBound",
            "properties": {
              "description": "Allow inbound traffic from azure load balancer",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "AzureLoadBalancer",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 65001,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllInBound",
            "properties": {
              "description": "Deny all inbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Inbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowVnetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to all VMs in VNET",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "VirtualNetwork",
              "destinationAddressPrefix": "VirtualNetwork",
              "access": "Allow",
              "priority": 65000,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowInternetOutBound",
            "properties": {
              "description": "Allow outbound traffic from all VMs to Internet",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "Internet",
              "access": "Allow",
              "priority": 65001,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "DenyAllOutBound",
            "properties": {
              "description": "Deny all outbound traffic",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 65500,
              "direction": "Outbound",
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ],
        "securityRules": [{
          "name": "AllowStorage",
          "properties": {
            "protocol": "*",
            "sourcePortRange": "*",
            "sourceAddressPrefix": "[concat('Storage.', resourceGroup().location)]",
            "destinationAddressPrefix": "*",
            "access": "Allow",
            "priority": 1000,
            "direction": "Inbound",
            "sourcePortRanges": [],
            "destinationPortRanges": ["80", "443"],
            "sourceAddressPrefixes": [],
            "destinationAddressPrefixes": [],
            "destinationPortRange": ""
          }
        }]
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressesWebName')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "zones": ["[parameters('availibiltyZone')]"],
      "scale": null,
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[replace(variables('publicIPAddressesWebName'),'-','')]",
          "fqdn": "[concat(replace(variables('publicIPAddressesWebName'),'-',''), resourceGroup().location,'.cloudapp.azure.com')]"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressesVPNName')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "condition": "[bool(parameters('deployVirtualNetworkGateway'))]",
      "zones": ["[parameters('availibiltyZone')]"],
      "scale": null,
      "properties": {
        "publicIPAddressVersion": "IPv4",
        "publicIPAllocationMethod": "Dynamic",
        "idleTimeoutInMinutes": 4,
        "dnsSettings": {
          "domainNameLabel": "[replace(variables('publicIPAddressesVPNName'),'-','')]",
          "fqdn": "[concat(replace(variables('publicIPAddressesVPNName'),'-',''), resourceGroup().location,'.cloudapp.azure.com')]"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Network/virtualNetworkGateways",
      "name": "[variables('virtualNetworkGatewayName')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "condition": "[bool(parameters('deployVirtualNetworkGateway'))]",
      "scale": null,
      "properties": {
        "ipConfigurations": [{
          "name": "default",
          "properties": {
            "privateIPAllocationMethod": "Dynamic",
            "publicIPAddress": {
              "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressesVPNName'))]"
            },
            "subnet": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetGateway'))]"
            }
          }
        }],
        "sku": {
          "name": "[variables('vpnGatewaySku')]",
          "tier": "[variables('vpnGatewaySku')]",
          "capacity": 2
        },
        "gatewayType": "Vpn",
        "vpnType": "[variables('vpnGatewayType')]",
        "enableBgp": false,
        "activeActive": false,
        "vpnClientConfiguration": {
          "vpnClientAddressPool": {
            "addressPrefixes": ["[variables('vpnGatewayAddressPrefix')]"]
          },
          "vpnClientProtocols": "[variables('vpnGatewayClientProtocols')]",
          "vpnClientRootCertificates": [{
            "name": "[variables('psRootCertificateName')]",
            "properties": {
              "publicCertData": "[variables('psRootCertifcatePublicData')]"
            }
          }],
          "vpnClientRevokedCertificates": []
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressesVPNName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkName'), variables('subnetGateway'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "addressSpace": {
          "addressPrefixes": ["[variables('virtualNetworkAddressPrefix')]"]
        },
        "subnets": [{
            "name": "[variables('subnetFrontend')]",
            "properties": {
              "addressPrefix": "[variables('subnetFrontendAddressPrefix')]"
            }
          },
          {
            "name": "[variables('subnetBackend')]",
            "properties": {
              "addressPrefix": "[variables('subnetBackendAddressPrefix')]"
            }
          },
          {
            "name": "[variables('subnetGateway')]",
            "properties": {
              "addressPrefix": "[variables('subnetGatewayAddressPrefix')]"
            }
          }
        ],
        "virtualNetworkPeerings": []
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_ZRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('storageAccountBackupName')]",
      "apiVersion": "2017-10-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('storageAccountDiagnosticsName')]",
      "apiVersion": "2017-10-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "name": "[variables('storageAccountGeneralName')]",
      "apiVersion": "2017-10-01",
      "location": "[resourceGroup().location]",
      "scale": null,
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": []
    },
    {
      "type": "Microsoft.RecoveryServices/vaults",
      "sku": {
        "name": "RS0",
        "tier": "Standard"
      },
      "name": "[variables('recoveryServiceVaultName')]",
      "apiVersion": "2016-06-01",
      "location": "[resourceGroup().location]",
      "properties": {},
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]",
        "[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameDb')), '/extensions/', 'configureScript-', variables('vmNameDb'))]",
        "[concat(resourceId('Microsoft.Compute/virtualMachines/', variables('vmNameApp')), '/extensions/', 'configureScript-', variables('vmNameApp'))]"
      ]
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupPolicies",
      "name": "[concat(variables('recoveryServiceVaultName'), '/', variables('backupPolicyName'))]",
      "apiVersion": "2016-06-01",
      "properties": {
        "backupManagementType": "AzureIaasVM",
        "schedulePolicy": {
          "scheduleRunFrequency": "Daily",
          "scheduleRunDays": null,
          "scheduleRunTimes": "[variables('backupPolicyTimes')]",
          "schedulePolicyType": "SimpleSchedulePolicy"
        },
        "retentionPolicy": {
          "dailySchedule": {
            "retentionTimes": "[variables('backupPolicyTimes')]",
            "retentionDuration": {
              "count": "[variables('backupDelay')]",
              "durationType": "[variables('backupUnit')]"
            }
          },
          "weeklySchedule": null,
          "monthlySchedule": null,
          "yearlySchedule": null,
          "retentionPolicyType": "LongTermRetentionPolicy"
        },
        "timeZone": "[variables('backupPolicyTimeZone')]"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('recoveryServiceVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
      "name": "[concat(variables('recoveryServiceVaultName'), '/', variables('backupFabric'), '/', variables('v2VmContainer'), concat(resourceGroup().name,';',variables('vmsToProtect')[copyIndex()]), '/', variables('v2Vm'), concat(resourceGroup().name,';',variables('vmsToProtect')[copyIndex()]))]",
      "apiVersion": "2016-06-01",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "protectedItemsCopy",
        "count": "[length(variables('vmsToProtect'))]"
      },
      "properties": {
        "protectedItemType": "[variables('v2VmType')]",
        "policyId": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies',variables('recoveryServiceVaultName'),variables('backupPolicyName'))]",
        "sourceResourceId": "[resourceId(subscription().subscriptionId,resourceGroup().name,'Microsoft.Compute/virtualMachines',variables('vmsToProtect')[copyIndex()])]"
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.RecoveryServices/vaults', variables('recoveryServiceVaultName'))]",
        "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies',variables('recoveryServiceVaultName'),variables('backupPolicyName'))]"     
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(variables('virtualNetworkName'), '/', variables('subnetFrontend'))]",
      "apiVersion": "2017-06-01",
      "scale": null,
      "properties": {
        "addressPrefix": "[variables('subnetFrontendAddressPrefix')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameFrontend'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(variables('virtualNetworkName'), '/', variables('subnetBackend'))]",
      "apiVersion": "2017-06-01",
      "scale": null,
      "properties": {
        "addressPrefix": "[variables('subnetBackendAddressPrefix')]",
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupNameBackend'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks/subnets",
      "name": "[concat(variables('virtualNetworkName'), '/', variables('subnetGateway'))]",
      "apiVersion": "2017-06-01",
      "scale": null,
      "properties": {
        "addressPrefix": "[variables('subnetGatewayAddressPrefix')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2015-04-01",
      "name": "[variables('vmScaleSetWebAutoScaleName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('vmScaleSetWebAutoScaleName')]",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmScaleSetWebName'))]",
        "enabled": true,
        "profiles": [{
          "name": "[concat(variables('vmScaleSetWebAutoScaleName'), '-cpu-profile')]",
          "capacity": {
            "minimum": "1",
            "maximum": "10",
            "default": "1"
          },
          "rules": [{
              "metricTrigger": {
                "metricName": "Percentage CPU",
                "metricNamespace": "",
                "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmScaleSetWebName'))]",
                "timeGrain": "PT1M",
                "statistic": "Average",
                "timeWindow": "PT5M",
                "timeAggregation": "Average",
                "operator": "GreaterThan",
                "threshold": 50
              },
              "scaleAction": {
                "direction": "Increase",
                "type": "ChangeCount",
                "value": "1",
                "cooldown": "PT5M"
              }
            },
            {
              "metricTrigger": {
                "metricName": "Percentage CPU",
                "metricNamespace": "",
                "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmScaleSetWebName'))]",
                "timeGrain": "PT1M",
                "statistic": "Average",
                "timeWindow": "PT5M",
                "timeAggregation": "Average",
                "operator": "LessThan",
                "threshold": 30
              },
              "scaleAction": {
                "direction": "Decrease",
                "type": "ChangeCount",
                "value": "1",
                "cooldown": "PT5M"
              }
            }
          ]
        }]
      },
      "tags": {
        "PlatformName": "[parameters('environmentName')]",
        "PlatformType": "[parameters('environmentType')]",
        "PlatformNumber": "[parameters('environmentNumber')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('vmScaleSetWebName'))]"
      ]
    }
  ]
}